/*gender(manuel, masculino).
gender(maria, femenino).
spouse(juan, juana).
parent(juan, juanello).
parent(juan, juanella).
sibling(juanello, juanella).
sibling(manuel, pepe).
sibling(manuel, juan).
sibling(maria, juan).
uncle(Person1, Person2) :-
    sibling(Person1, Person3),
	parent(Person3, Person2).*/
	
/* - En prolog, crear hechos y reglas 
para definir las relaciones familiares, 
estas deben incluir Papa, Mama, Hijos, 
Hermanos, con Hechos y con Reglas Abuelos, 
Primos, Sobrinos y TÃ­os. */

padre(josue,josuecito).
padre(samuel,samuelito).

padre(manuel,josue).
padre(manuel,samuel).

padre(teodoro,chito).
padre(teodoro,manuel).

padre(chito,minerva).
padre(chito,teodorito).

padre(juan,guadalupe).
padre(juan,pepe).


madre(guadalupe,josue).
madre(guadalupe,samuel).

madre(rosa,manuel).
madre(rosa,chito).

madre(aurora,minerva).
madre(aurora,teodorito).

madre(rebeca,guadalupe).
madre(rebeca,pepe).


hijos(Persona1,Persona2) :-
	padre(Persona2,Persona1).
hijos(Persona1,Persona2) :-
	madre(Persona2,Persona1).


hermanos(Persona1,Persona2) :-
	padre(Persona3,Persona1),
	padre(Persona3,Persona2),
	madre(Persona4,Persona1),
	madre(Persona4,Persona1),
	Persona1 \= Persona2.


tios(Persona1,Persona2) :-
	hermanos(Persona1,Persona3),
	padre(Persona3,Persona2).
tios(Persona1,Persona2) :-
	hermanos(Persona1,Persona3),
	madre(Persona3,Persona2).


abuelos(Persona1,Persona2) :-
	padre(Persona1,Persona3),
	padre(Persona3,Persona2).
abuelos(Persona1,Persona2) :-
	madre(Persona1,Persona3),
	padre(Persona3,Persona2).
abuelos(Persona1,Persona2) :-
	padre(Persona1,Persona3),
	madre(Persona3,Persona2).
abuelos(Persona1,Persona2) :-
	madre(Persona1,Persona3),
	madre(Persona3,Persona2).


sobrinos(Persona1,Persona2) :-
	hijos(Persona1,Persona3),
	hermanos(Persona3,Persona2).

	
primos(Persona1,Persona2) :-
	tios(Persona3,Persona1),
	padre(Persona3,Persona2).
primos(Persona1,Persona2) :-
	tios(Persona3,Persona1),
	madre(Persona3,Persona2).	


/* usuario (Persona,Saldo) */	
:- dynamic usuario/2.
usuario(juan,170).
usuario(juanelo,530).

/* articulo (articulo,stock,costo) */
:- dynamic articulo/3.
articulo(computadora,1,200).
articulo(usb,100,10).
articulo(celular,1,200).

/* Crear ordenDeCompra, validar saldo y stock 
   Actualiza saldo de user y stock de item 
   Actualiza saldo de user y stock de item  
      despues de orden de compra*/
ordenDeCompra(Persona,Articulo,Cantidad):-
	usuario(Persona,Saldo),
	articulo(Articulo,CantidadArticulo,CostoArticulo),
	CantidadArticulo > 0,
	Cantidad > 0,
	Cantidad =< CantidadArticulo,
	Saldo >= CostoArticulo*Cantidad,
	NuevoSaldo is Saldo-CostoArticulo*Cantidad,
	NuevoStock is CantidadArticulo-Cantidad,
	actualizarUsuario(Persona,Saldo,NuevoSaldo),
	actualizarStock(Articulo,CantidadArticulo,NuevoStock,CostoArticulo).

actualizarUsuario(Nombre,Saldo,NuevoSaldo):-
	retract(usuario(Nombre,Saldo)),
	asserta(usuario(Nombre,NuevoSaldo)).
	
actualizarStock(Articulo,Stock,NuevoStock,Costo):-
	retract(articulo(Articulo,Stock,Costo)),
	asserta(articulo(Articulo,NuevoStock,Costo)).
	

mylist([red,green,yellow,blue,black]).
mylist(A).

esprimo(2) :- 
	write(entro),
	true,
	!.
esprimo(Numero) :-
	write(Numero),
	write('\n'),
	Numero < 2,
	write(Numero < 2),
	write('\n'),
	!,
	false.
esprimo(Numero) :-
	NumAux is Numero - 1,
	write(NumAux),
	write('\n'),
	primoRec(Numero, NumAux).

primoRec(Numero,1) :- true, !.
primoRec(Numero, NumAux):-
	Residuo is Numero mod NumAux,
	write('residuo:'),
	write(Residuo),write('\n'),
	Residuo =\= 0,!,
	write('resultado:'),
	write(Residuo =\= 0),write('\n'),
	NuevoNumAux is NumAux - 1,
	write('nuevo divisor:'),
	write(NuevoNumAux),write('\n'),
	primoRec(Numero,NuevoNumAux).
	
mcd(Num1, Num2, Num) :-
	Num1 > 0,
	Num2 > 0,
	Num3 is Num1 mod Num2,
	%write(Num3),
	mcdRec(Num2, Num3, Num4),
	Num is Num4.

mcdRec(Num2, 0, Num4) :-
	Num4 is Num2, !.	
mcdRec(Num2, Num3, Num4) :-
	Num5 is Num2 mod Num3,
	mcdRec(Num3, Num5, Num4).
	
	
	
	
	
	
	